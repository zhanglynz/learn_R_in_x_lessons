[["index.html", "Learn R in 10 Lessons: an Introductory Guide Preface", " Learn R in 10 Lessons: an Introductory Guide Lingyun Zhang 2022-12-28 Preface Why learn R? R is a general purpose computer language R is the best for dealing with data R has such a good IDE (Integrated Development Environment), RStudio R has so many valuable/powerful packages R has a very good ecosystem R is free What to learn? base R R packages workflows How to learn? try to learn from the best resources grasp the basics aim to problem solving with R write many R scrips learn incessantly "],["L1.html", "1 Lesson 1 Getting Ready 1.1 Get R and Rstudio 1.2 Use RStuio to install R packages 1.3 Explore Rstudio", " 1 Lesson 1 Getting Ready 1.1 Get R and Rstudio We need to Download R from CRAN Install Rjust use the default settings Download RStudio from RStudio/posit Install RStudio 1.2 Use RStuio to install R packages Open RStudio. Click on File&gt;New File&gt;R Script, next copy the following R code and paste it to the screen called Untitled1 install.packages(c(&quot;dplyr&quot;, &quot;tidyr&quot;)) install.packages(&quot;ggplot2&quot;) install.packages(&quot;data.table&quot;) Run each line of code by i) moving the cursor in that line; ii) pressing down Ctrl key then clicking on Enter key 1.3 Explore Rstudio Tasks : Figure out how to create a new project, called my_proj_1 Figure out how to create an R script, called try_1.R, which is under the just created project my_proj_1 and contains the following R code 1+1 print(&quot;Hello World!&quot;) rnorm(5) Figure out how to run R code in try_1.R: a) line by line; b) all three lines together. "],["L2.html", "2 Lesson 2 Toy Examples", " 2 Lesson 2 Toy Examples There are three toy examples; go through them one by one. Firstly, think about how to solve the problem by yourself; and then study the example R code. Example 1: Write an R program to plot \\(f(x)=\\sin(x)\\) (black color) and \\(g(x)=\\cos(x)\\) (red color) together; \\(x\\) takes values from \\(-2\\pi\\) to \\(2\\pi\\). x &lt;- seq(-2*pi, 2*pi, by = 0.01) y_1 &lt;- sin(x) y_2 &lt;- cos(x) plot(x, y_1, type = &#39;l&#39;, col = &#39;black&#39;, xlab = &#39;x&#39;, ylab = &#39;y&#39;, main = &quot;Plot of sin(x) (black) and cos(x) (red)&quot;) points(x, y_2, type = &#39;l&#39;, col = &#39;red&#39;) abline(h = 0, lty = 2) abline(v = 0, lty = 2) Example 2: Check all integers from 1 to 100: if an integer is multiple of 5, then output F; if the integer is multiple of 7, then output S; if its multiple of both 5 and 7, then output FS; otherwise just output the integer. nbr &lt;- 1:100 output &lt;- rep(&quot;&quot;, times = 100) for(i in nbr) { s &lt;- &quot;&quot; if(i %% 5 == 0) s &lt;- &quot;F&quot; if(i %% 7 == 0) s &lt;- paste0(s, &quot;S&quot;) if(s != &quot;&quot;) {output[i] &lt;- s } else {output[i] &lt;- i} } print(output) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;F&quot; &quot;6&quot; &quot;S&quot; &quot;8&quot; &quot;9&quot; &quot;F&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;S&quot; &quot;F&quot; ## [16] &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;F&quot; &quot;S&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; &quot;F&quot; &quot;26&quot; &quot;27&quot; &quot;S&quot; &quot;29&quot; &quot;F&quot; ## [31] &quot;31&quot; &quot;32&quot; &quot;33&quot; &quot;34&quot; &quot;FS&quot; &quot;36&quot; &quot;37&quot; &quot;38&quot; &quot;39&quot; &quot;F&quot; &quot;41&quot; &quot;S&quot; &quot;43&quot; &quot;44&quot; &quot;F&quot; ## [46] &quot;46&quot; &quot;47&quot; &quot;48&quot; &quot;S&quot; &quot;F&quot; &quot;51&quot; &quot;52&quot; &quot;53&quot; &quot;54&quot; &quot;F&quot; &quot;S&quot; &quot;57&quot; &quot;58&quot; &quot;59&quot; &quot;F&quot; ## [61] &quot;61&quot; &quot;62&quot; &quot;S&quot; &quot;64&quot; &quot;F&quot; &quot;66&quot; &quot;67&quot; &quot;68&quot; &quot;69&quot; &quot;FS&quot; &quot;71&quot; &quot;72&quot; &quot;73&quot; &quot;74&quot; &quot;F&quot; ## [76] &quot;76&quot; &quot;S&quot; &quot;78&quot; &quot;79&quot; &quot;F&quot; &quot;81&quot; &quot;82&quot; &quot;83&quot; &quot;S&quot; &quot;F&quot; &quot;86&quot; &quot;87&quot; &quot;88&quot; &quot;89&quot; &quot;F&quot; ## [91] &quot;S&quot; &quot;92&quot; &quot;93&quot; &quot;94&quot; &quot;F&quot; &quot;96&quot; &quot;97&quot; &quot;S&quot; &quot;99&quot; &quot;F&quot; Example 3: Write an R function to calculate how old you are in days. library(lubridate) # to use function days() how_old_in_days &lt;- function(`birth_day_yyyy-mm-dd`) {today &lt;- Sys.Date() life_in_days &lt;- days(today - as.Date(`birth_day_yyyy-mm-dd`)) print(life_in_days) } how_old_in_days(&quot;2005-12-04&quot;) # today is &quot;2022-12-25&quot; ## [1] &quot;6233d 0H 0M 0S&quot; "],["L3.html", "3 Lesson 3 R Essentials 3.1 A formula 3.2 R language", " 3 Lesson 3 R Essentials 3.1 A formula Learning any a computer language, we aim to write programs for solving problems. Its useful to know the following formula: \\[ \\hbox{program}\\approx \\hbox{algorithm} + \\hbox{data structure} + \\hbox{language} \\] Algorithm, roughly speaking, is about logic steps towards solving a problem, but it is beyond the scope of this book. Fortunately, at a beginning level, all the algorithms that we need are pretty easy. We will cover main data structures in R in Lesson 4. As for language, specifically R language, we will grasp the most important things in this lesson. 3.2 R language To learn R, we must learn assignment if else for loop built-in R functions writing R functions R packages Note that items 1 to 5 in the above are in the domain of base R; various R packages that we install after having R can be referred to as extended R. In this section, we will cover items 1 to 3; items 4 and 5 will be the topics for Lesson 5; item 6 will be covered in Lesson 6. 3.2.1 Assignment statements In R, an assignment statement creates a new (vector) variable and gives it value(s). Examples: my_name &lt;- &quot;Larry&quot; age &lt;- 25 sex &lt;- &quot;male&quot; the_nbrs &lt;- 1:100 five_random_nbrs &lt;- c(1.2, 2.8, 5.9, 4.0, 3.7) a_flag &lt;- c(TRUE, FALSE, TRUE) As shown in the above examples, an assignment is something like variable_name &lt;- values Rules: A variable name contains letters, digits (0-9), . (dot) or _ (underscore). A variable name normally starts with a letter. Reserved words (e.g.Â if) cannot be used as a variable name. 3.2.2 if else Examples: x &lt;- 10 if(x &gt; 5) print(&quot;x is greater than 5.&quot;) ## [1] &quot;x is greater than 5.&quot; if(x &gt; 50) {print(&quot;x is greater than 50&quot;) } else {print(&quot;x is NOT greater than 50&quot;)} ## [1] &quot;x is NOT greater than 50&quot; Rules: if(conditional) {execution} if(conditional) {execution} else {alternative execution} else if: this is kind of special. Lets have an example. We create a function for giving a score, either green, orange, or red, based on x is positive and \\(\\le\\) 1, greater than 1 but \\(\\le\\) 2, or greater than 2. have_a_score &lt;- function(x) {if(x &lt; 0) { &quot;invalid&quot; } else if(x &lt;= 1) { &quot;green&quot; } else if(x &lt;= 2) { &quot;orange&quot; } else { &quot;red&quot; } } print(have_a_score(-1)) ## [1] &quot;invalid&quot; print(have_a_score(0.5)) ## [1] &quot;green&quot; ifelse: it is a vectorized version of if else. Example: x &lt;- 1:10 output &lt;- ifelse(x %% 2 == 0, &quot;even&quot;, &quot;odd&quot;) print(output) ## [1] &quot;odd&quot; &quot;even&quot; &quot;odd&quot; &quot;even&quot; &quot;odd&quot; &quot;even&quot; &quot;odd&quot; &quot;even&quot; &quot;odd&quot; &quot;even&quot; 3.2.3 for loop Examples: s &lt;- 0 for(i in 1:100) { s &lt;- s + i } print(s) ## [1] 5050 for(a in letters[1:5]) { print(a) } ## [1] &quot;a&quot; ## [1] &quot;b&quot; ## [1] &quot;c&quot; ## [1] &quot;d&quot; ## [1] &quot;e&quot; Rules: for(a_var in a_vector) {action} "],["L4.html", "4 Lesson 4 Data Structure 4.1 Atomic Vectors 4.2 Structured Vecotrs", " 4 Lesson 4 Data Structure In R, the fundamentally important data structure is vector, which can be roughly defined as a tuple of elements. We can divide R vectors into two classes: a) atomic vectors; b) (other) structured vectors. 4.1 Atomic Vectors The most useful atomic vectors are logical, integer, double and character types. Examples: (a_logic_vec &lt;- c(TRUE, FALSE, TRUE)) ## [1] TRUE FALSE TRUE (an_integer_vec &lt;- 1L:6L) ## [1] 1 2 3 4 5 6 (a_double_vec &lt;- seq(0, 1, by = 0.2)) ## [1] 0.0 0.2 0.4 0.6 0.8 1.0 (a_character_vec &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; We can use R function typeof() to find out the type of an atomic vector. c(typeof(a_logic_vec), typeof(an_integer_vec), typeof(a_double_vec), typeof(a_character_vec)) ## [1] &quot;logical&quot; &quot;integer&quot; &quot;double&quot; &quot;character&quot; or vapply(list(a_logic_vec, an_integer_vec, a_double_vec, a_character_vec), typeof, character(1L)) ## [1] &quot;logical&quot; &quot;integer&quot; &quot;double&quot; &quot;character&quot; Important: When different types of atomic-vector variables are on operation, R automatically changes variables types. The rule of change is: from low to just high enough. As for low and high, the order is \\[ \\hbox{logical}&lt;\\hbox{integer}&lt;\\hbox{double}&lt;\\hbox{character} \\] Note that when converting from logical to integer, TRUE and FALSE become 1L and 0L, respectively. R function length() gives lengthhow many elements an atomic vector has. When two atomic-vector variables of different lengths are on operation, R will firstly recycle the shorter variable. Examples: (a_logic_vec + an_integer_vec) ## [1] 2 2 4 5 5 7 print(c(an_integer_vec, a_double_vec)) ## [1] 1.0 2.0 3.0 4.0 5.0 6.0 0.0 0.2 0.4 0.6 0.8 1.0 print(c(a_logic_vec, a_double_vec, a_character_vec)) ## [1] &quot;TRUE&quot; &quot;FALSE&quot; &quot;TRUE&quot; &quot;0&quot; &quot;0.2&quot; &quot;0.4&quot; &quot;0.6&quot; &quot;0.8&quot; &quot;1&quot; ## [10] &quot;a&quot; &quot;b&quot; &quot;c&quot; 4.2 Structured Vecotrs "],["L5.html", "5 Lesson 5 R Functions", " 5 Lesson 5 R Functions "],["L6.html", "6 Lesson 6 R Packages", " 6 Lesson 6 R Packages "],["L7.html", "7 Lesson 7 Making Plots", " 7 Lesson 7 Making Plots "],["L8.html", "8 Lesson 8 Data Manipulation", " 8 Lesson 8 Data Manipulation "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
