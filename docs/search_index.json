[["index.html", "Learn R in 10 Lessons: an Introductory Guide Preface", " Learn R in 10 Lessons: an Introductory Guide Lingyun Zhang 2023-01-05 Preface Why learn R? R is a general purpose computer language R is the best for dealing with data R has such a good IDE (Integrated Development Environment), RStudio R has so many valuable/powerful packages R has a very good ecosystem R is free What to learn? base R R packages workflows How to learn? try to learn from the best resources grasp the basics aim to problem solving with R write many R scrips learn incessantly "],["L1.html", "1 Lesson 1 Getting Ready 1.1 Get R and Rstudio 1.2 Use RStuio to install R packages 1.3 Explore Rstudio", " 1 Lesson 1 Getting Ready 1.1 Get R and Rstudio We need to Download R from CRAN Install Rjust use the default settings Download RStudio from RStudio/posit Install RStudio 1.2 Use RStuio to install R packages Open RStudio. Click on File&gt;New File&gt;R Script, next copy the following R code and paste it to the screen called Untitled1 install.packages(c(&quot;dplyr&quot;, &quot;tidyr&quot;)) install.packages(&quot;ggplot2&quot;) install.packages(&quot;data.table&quot;) Run each line of code by i) moving the cursor in that line; ii) pressing down Ctrl key then clicking on Enter key 1.3 Explore Rstudio Tasks : Figure out how to create a new project, called my_proj_1 Figure out how to create an R script, called try_1.R, which is under the just created project my_proj_1 and contains the following R code 1+1 print(&quot;Hello World!&quot;) rnorm(5) Figure out how to run R code in try_1.R: a) line by line; b) all three lines together. "],["L2.html", "2 Lesson 2 Toy Examples", " 2 Lesson 2 Toy Examples There are three toy examples; go through them one by one. Firstly, think about how to solve the problem by yourself; and then study the example R code. Example 1: Write an R program to plot \\(f(x)=\\sin(x)\\) (black color) and \\(g(x)=\\cos(x)\\) (red color) together; \\(x\\) takes values from \\(-2\\pi\\) to \\(2\\pi\\). x &lt;- seq(-2*pi, 2*pi, by = 0.01) y_1 &lt;- sin(x) y_2 &lt;- cos(x) plot(x, y_1, type = &#39;l&#39;, col = &#39;black&#39;, xlab = &#39;x&#39;, ylab = &#39;y&#39;, main = &quot;Plot of sin(x) (black) and cos(x) (red)&quot;) points(x, y_2, type = &#39;l&#39;, col = &#39;red&#39;) abline(h = 0, lty = 2) abline(v = 0, lty = 2) Example 2: Check all integers from 1 to 100: if an integer is multiple of 5, then output F; if the integer is multiple of 7, then output S; if its multiple of both 5 and 7, then output FS; otherwise just output the integer. nbr &lt;- 1:100 output &lt;- rep(&quot;&quot;, times = 100) for(i in nbr) { s &lt;- &quot;&quot; if(i %% 5 == 0) s &lt;- &quot;F&quot; if(i %% 7 == 0) s &lt;- paste0(s, &quot;S&quot;) if(s != &quot;&quot;) {output[i] &lt;- s } else {output[i] &lt;- i} } print(output) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;F&quot; &quot;6&quot; &quot;S&quot; &quot;8&quot; &quot;9&quot; &quot;F&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;S&quot; &quot;F&quot; ## [16] &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;F&quot; &quot;S&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; &quot;F&quot; &quot;26&quot; &quot;27&quot; &quot;S&quot; &quot;29&quot; &quot;F&quot; ## [31] &quot;31&quot; &quot;32&quot; &quot;33&quot; &quot;34&quot; &quot;FS&quot; &quot;36&quot; &quot;37&quot; &quot;38&quot; &quot;39&quot; &quot;F&quot; &quot;41&quot; &quot;S&quot; &quot;43&quot; &quot;44&quot; &quot;F&quot; ## [46] &quot;46&quot; &quot;47&quot; &quot;48&quot; &quot;S&quot; &quot;F&quot; &quot;51&quot; &quot;52&quot; &quot;53&quot; &quot;54&quot; &quot;F&quot; &quot;S&quot; &quot;57&quot; &quot;58&quot; &quot;59&quot; &quot;F&quot; ## [61] &quot;61&quot; &quot;62&quot; &quot;S&quot; &quot;64&quot; &quot;F&quot; &quot;66&quot; &quot;67&quot; &quot;68&quot; &quot;69&quot; &quot;FS&quot; &quot;71&quot; &quot;72&quot; &quot;73&quot; &quot;74&quot; &quot;F&quot; ## [76] &quot;76&quot; &quot;S&quot; &quot;78&quot; &quot;79&quot; &quot;F&quot; &quot;81&quot; &quot;82&quot; &quot;83&quot; &quot;S&quot; &quot;F&quot; &quot;86&quot; &quot;87&quot; &quot;88&quot; &quot;89&quot; &quot;F&quot; ## [91] &quot;S&quot; &quot;92&quot; &quot;93&quot; &quot;94&quot; &quot;F&quot; &quot;96&quot; &quot;97&quot; &quot;S&quot; &quot;99&quot; &quot;F&quot; Example 3: Write an R function to calculate how old you are in days. library(lubridate) # to use function days() how_old_in_days &lt;- function(`birth_day_yyyy-mm-dd`) {today &lt;- Sys.Date() life_in_days &lt;- days(today - as.Date(`birth_day_yyyy-mm-dd`)) print(life_in_days) } how_old_in_days(&quot;2005-12-04&quot;) # today is &quot;2022-12-25&quot; ## [1] &quot;6241d 0H 0M 0S&quot; "],["L3.html", "3 Lesson 3 R Essentials 3.1 A formula 3.2 R language", " 3 Lesson 3 R Essentials 3.1 A formula Learning any a computer language, we aim to write programs for solving problems. Its useful to know the following formula: \\[ \\hbox{program}\\approx \\hbox{algorithm} + \\hbox{data structure} + \\hbox{language} \\] Algorithm, roughly speaking, is about logic steps towards solving a problem, but it is beyond the scope of this book. Fortunately, at a beginning level, all the algorithms that we need are pretty easy. We will cover main data structures in R in Lesson 4. As for language, specifically R language, we will grasp the most important things in this lesson. 3.2 R language To learn R, we must learn assignment if else for loop functions from R system writing our own R functions R packages Note that items 1 to 5 in the above are in the domain of base R (the R that we download from CRAN); various R packages that we install after having R can be referred to as extended R. In this section, we will cover items 1 to 3; items 4 and 5 will be the topics for Lesson 5; item 6 will be covered in Lesson 6. 3.2.1 Assignment statements In R, an assignment statement creates a new (vector) variable and gives it value(s). Examples: my_name &lt;- &quot;Larry&quot; age &lt;- 25 sex &lt;- &quot;male&quot; the_nbrs &lt;- 1:100 five_random_nbrs &lt;- c(1.2, 2.8, 5.9, 4.0, 3.7) a_flag &lt;- c(TRUE, FALSE, TRUE) As shown in the above examples, an assignment is something like variable_name &lt;- values Rules: A variable name contains letters, digits (0-9), . (dot) or _ (underscore). A variable name normally starts with a letter. Reserved words (e.g.Â if) cannot be used as a variable name. 3.2.2 if else Examples: x &lt;- 10 if(x &gt; 5) print(&quot;x is greater than 5.&quot;) ## [1] &quot;x is greater than 5.&quot; if(x &gt; 50) {print(&quot;x is greater than 50&quot;) } else {print(&quot;x is NOT greater than 50&quot;)} ## [1] &quot;x is NOT greater than 50&quot; Rules: if(conditional) {execution} if(conditional) {execution} else {alternative execution} else if: this is kind of special. Lets have an example. We create a function for giving a score, either green, orange, or red, based on x is positive and \\(\\le\\) 1, greater than 1 but \\(\\le\\) 2, or greater than 2, respectively. have_a_score &lt;- function(x) {if(x &lt; 0) { &quot;invalid&quot; } else if(x &lt;= 1) { &quot;green&quot; } else if(x &lt;= 2) { &quot;orange&quot; } else { &quot;red&quot; } } print(have_a_score(-1)) ## [1] &quot;invalid&quot; print(have_a_score(0.5)) ## [1] &quot;green&quot; ifelse: it is a vectorized version of if else. Example: x &lt;- 1:10 output &lt;- ifelse(x %% 2 == 0, &quot;even&quot;, &quot;odd&quot;) print(output) ## [1] &quot;odd&quot; &quot;even&quot; &quot;odd&quot; &quot;even&quot; &quot;odd&quot; &quot;even&quot; &quot;odd&quot; &quot;even&quot; &quot;odd&quot; &quot;even&quot; 3.2.3 for loop Examples: s &lt;- 0 for(i in 1:100) { s &lt;- s + i } print(s) ## [1] 5050 for(a in letters[1:5]) { print(a) } ## [1] &quot;a&quot; ## [1] &quot;b&quot; ## [1] &quot;c&quot; ## [1] &quot;d&quot; ## [1] &quot;e&quot; Rules: for(a_var in a_vector) {action} "],["L4.html", "4 Lesson 4 Data Structures 4.1 Atomic Vectors 4.2 Lists 4.3 Matrices 4.4 Data Frames 4.5 Factors and Dates", " 4 Lesson 4 Data Structures Acknowledgments: This chapter is written after I read Chapter 3 of Hadley Wickhams book, Advanced R 2nd Ed, https://adv-r.hadley.nz/vectors-chap.html In R, the fundamentally important data structure is vector, which can be roughly defined as a tuple of elements. R vectors include atomic vectors and lists1. Other R data structures are built upon vectors by adding more attributes. Talking about attributes, I want to quote words from Hadley Wickham (Advanced R 2nd Ed, https://adv-r.hadley.nz/vectors-chap.html): The most important attributes are names, dimensions and class. Two attributes are particularly important. The dimension attribute turns vectors into matrices and arrays and the class attribute powers the S3 object system. 4.1 Atomic Vectors The most useful atomic vectors are logical, integer, double and character types. Examples: (a_logic_vec &lt;- c(TRUE, FALSE, TRUE)) ## [1] TRUE FALSE TRUE (an_integer_vec &lt;- 1L:6L) ## [1] 1 2 3 4 5 6 (a_double_vec &lt;- c(1, 2, 3, 4, 5, 6)) ## [1] 1 2 3 4 5 6 (identical(an_integer_vec, a_double_vec)) ## [1] FALSE (a_character_vec &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;123&#39;)) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;123&quot; We can use R function typeof() to find out the type of an atomic vector. c(typeof(a_logic_vec), typeof(an_integer_vec), typeof(a_double_vec), typeof(a_character_vec)) ## [1] &quot;logical&quot; &quot;integer&quot; &quot;double&quot; &quot;character&quot; or vapply(list(a_logic_vec, an_integer_vec, a_double_vec, a_character_vec), typeof, character(1L)) ## [1] &quot;logical&quot; &quot;integer&quot; &quot;double&quot; &quot;character&quot; Important: When different types of atomic-vector variables are on operation, R automatically changes variables types. The rule of change is: from low to just high enough. As for low and high, the order is \\[ \\hbox{logical}&lt;\\hbox{integer}&lt;\\hbox{double}&lt;\\hbox{character} \\] Note that when converting from logical to integer, TRUE and FALSE become 1L and 0L, respectively. R function length() gives lengthhow many elements an atomic vector has. When two atomic-vector variables of different lengths are on operation, R will firstly recycle the shorter variable. We use vec[index] or other ways2 to get values from an atomic vector. Examples: (a_logic_vec + an_integer_vec) ## [1] 2 2 4 5 5 7 print(c(an_integer_vec, a_double_vec)) ## [1] 1 2 3 4 5 6 1 2 3 4 5 6 print(c(a_logic_vec, a_double_vec, a_character_vec)) ## [1] &quot;TRUE&quot; &quot;FALSE&quot; &quot;TRUE&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; ## [10] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;123&quot; print(a_character_vec[c(1, 4)]) ## [1] &quot;a&quot; &quot;123&quot; a &lt;- c(1, 1e3, 1e5) b &lt;- c(1L, 1e3L, 1e5L) (a == b) # type changes when on operation ## [1] TRUE TRUE TRUE (identical(a, b)) ## [1] FALSE (as.character(a)) # interesting! ## [1] &quot;1&quot; &quot;1000&quot; &quot;1e+05&quot; (as.character(b)) ## [1] &quot;1&quot; &quot;1000&quot; &quot;100000&quot; (as.character(as.integer(a))) # this might be useful in practice. ## [1] &quot;1&quot; &quot;1000&quot; &quot;100000&quot; 4.2 Lists A list and an atomic vector share the common property of a tuple of elements. A list differs an atomic vector in that each element (item) in a list can be more complex stuff but not limited to a logical/integer/double/character value. We use a_list[index] to subset a list, and we use a_list[[index]] or a_list[[item name]] to have one item from a list. Lets have an example a_list &lt;- list(item_1 = 1L:3L, item_2 = &quot;I like R&quot;, item_3 = c(TRUE, FALSE), item_4 = c(1.8, 2.6, 3.3, 8.9, 10.0)) (is.list(a_list)) ## [1] TRUE print(names(a_list)) ## [1] &quot;item_1&quot; &quot;item_2&quot; &quot;item_3&quot; &quot;item_4&quot; print(length(a_list)) ## [1] 4 print(lengths(a_list)) ## item_1 item_2 item_3 item_4 ## 3 1 2 5 print(a_list[c(1, 2)]) ## $item_1 ## [1] 1 2 3 ## ## $item_2 ## [1] &quot;I like R&quot; print(a_list[2]) ## $item_2 ## [1] &quot;I like R&quot; print(a_list[[2]]) ## [1] &quot;I like R&quot; print(a_list[[&quot;item_2&quot;]]) ## [1] &quot;I like R&quot; 4.3 Matrices A matrix is a vector with the dim attribute. a_matrix &lt;- structure(1:9, dim = c(3, 3)) (is.matrix(a_matrix)) ## [1] TRUE (attributes(a_matrix)) ## $dim ## [1] 3 3 print(a_matrix) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 b_matrix &lt;- matrix(1:9, ncol = 3) (is.matrix(b_matrix)) ## [1] TRUE (attributes(b_matrix)) ## $dim ## [1] 3 3 print(b_matrix) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 (identical(a_matrix, b_matrix)) ## [1] TRUE 4.4 Data Frames A data frame is a rectangular table with columns and rows. Technically speaking, a data frame is a list of atomic vectorsthey have the same lengthplus three attributes: a) names (for columns); b) row.names; and class = data.frame Data frames share the properties of both matrices and lists. my_df_1 &lt;- structure(list(1:5, letters[1:5], c(TRUE, FALSE, TRUE, FALSE, TRUE)), names = c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), row.names = 1:5, class = &quot;data.frame&quot;) is.data.frame(my_df_1) ## [1] TRUE attributes(my_df_1) ## $names ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; ## ## $row.names ## [1] 1 2 3 4 5 ## ## $class ## [1] &quot;data.frame&quot; my_df_2 &lt;- data.frame(a = 1:5, b = letters[1:5], c = c(TRUE, FALSE, TRUE, FALSE, TRUE), row.names = 1:5, stringsAsFactors = FALSE) identical(my_df_1, my_df_2) ## [1] TRUE 4.5 Factors and Dates Again, I quote words from Hadley Wickham (Advanced R 2nd Ed, https://adv-r.hadley.nz/vectors-chap.html): About factors Factors are built on top of an integer vector with two attributes: a class, factor, which makes it behave differently from regular integer vectors, and levels, which defines the set of allowed values. Its usually best to explicitly convert factors to character vectors if you need string-like behaviour. About Dates Date vectors are built on top of double vectors. They have class Date and no other attributes. According to Hadley Wickham, Advanced R 2nd Ed., NULL is closely related to vectors and often serves the role of a generic zero length vector. For details see Hadley Wickham, https://adv-r.hadley.nz/subsetting.html "],["L5.html", "5 Lesson 5 R Functions 5.1 Base R Functions 5.2 Wrting R Functions", " 5 Lesson 5 R Functions Keep this in mind: In R, we use functions to get work done. So learning R in some a sense is learning how to use existed R functions and how to create new R functions. Existed R functions are those included in base R and extended R packages. In this lesson, we firstly list some base R functions, and then touch upon how to write our own R functions. 5.1 Base R Functions Function Description Example : create integer vector x &lt;- 1:5 c() for creating vector x &lt;- c(1, 5, 8) rep() for creating vector x &lt;- rep(0, 100) seq() for creating vector x &lt;- seq(0, 1, by = 0.2) length() get vectors length n &lt;- length(x) print() print out print(x) list() create a list my_list &lt;- list(a = 1, b = 2:6) matrix() create a matrix m &lt;- matrix(1:9, 3, 3) typeof() get vectors type typeof(x) plot() for plotting getwd() get working directory getwd() math functions abs(x); exp(x) stats functions mean(x); sd(x);rnorm(10) The following code allows us to see many more built-in-base-R functions: # Source: https://stackoverflow.com/questions/58476696/list-of-all-functions-in-base-r base_packages &lt;- getOption(&#39;defaultPackages&#39;) names(base_packages) &lt;- base_packages lapply(base_packages, function (pkg) ls(paste0(&#39;package:&#39;, pkg))) 5.2 Wrting R Functions 5.2.1 Basics An R function looks like func_name &lt;- function(arguments) { body } Some points: Generally, function names should be verbs, and arguments should be nouns. (Wickham and Grolemund, https://r4ds.had.co.nz/functions.html) This is a good convention; anyway, function names should make sense and often should be self explained. The body part can have many lines of R code; the last line is often return(an_object) (an_object can be an atomic vector, list, matrix, data frame or other OO [Object Oriented] object) 5.2.2 Tips Use divide and conquer strategy to break a big task into small ones, and write a function for each small task rather than write a huge function for the big task. The advantages of this approach are: a) easier for debugging and maintenance; b) some small functions may be useful for other tasks. Use lapply() and other helper functions (e.g.Â unlist()) to give a vectorized functionsee this in the following example, get sum of words. Using match.arg()see this in the following example, add, subtract and multiply. Function factorysee this in the following example, create an operation. Example: get sum of words letter_to_nbr &lt;- function(a_letter) {which(letters %in% a_letter) } get_sum_of_a_word &lt;- function(a_word) {chars &lt;- unlist(strsplit(a_word, split = &quot;&quot;)) the_nbrs &lt;- vapply(chars, letter_to_nbr, numeric(1)) return(sum(the_nbrs)) } get_sum_of_words &lt;- function(word_vec) {unlist(lapply(word_vec, get_sum_of_a_word)) } # testing get_sum_of_a_word(&quot;aabbcde&quot;) ## [1] 18 get_sum_of_words(c(&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;)) ## [1] 1 3 6 Example: using match.arg() add_subtr_multi &lt;- function(x, y, method = c(&quot;sum&quot;, &quot;subtract&quot;, &quot;multipliction&quot;)) {method &lt;- match.arg(method) switch(method, &quot;sum&quot; = x + y, &quot;subtract&quot; = x - y, &quot;multipliction&quot; = x * y) } # testing add_subtr_multi(1, 2, &quot;sum&quot;) ## [1] 3 add_subtr_multi(2, 1, &quot;subtract&quot;) ## [1] 1 add_subtr_multi(10, 10, &quot;multipliction&quot;) ## [1] 100 Example: function factory create_an_op &lt;- function(op = c(&quot;sum&quot;, &quot;subtract&quot;, &quot;multipliction&quot;)) {op &lt;- match.arg(op) function(x, y) { switch(op, &quot;sum&quot; = x + y, &quot;subtract&quot; = x - y, &quot;multipliction&quot; = x * y) } } # testing plus_op &lt;- create_an_op(&quot;sum&quot;) subtr_op &lt;- create_an_op(&quot;subtract&quot;) multi_op &lt;- create_an_op(&quot;multipliction&quot;) plus_op(1, 2) ## [1] 3 subtr_op(1, 2) ## [1] -1 multi_op(10, 10) ## [1] 100 "],["L6.html", "6 Lesson 6 R Packages 6.1 Extended R Packages 6.2 Writing R Packages", " 6 Lesson 6 R Packages An R package basically is package of R functions plus metadata and documentations. Base R (the R that we download from CRAN) has at least these R packages base methods stats utils graphics grDevices datasets We call all the other packages that not included in base R extended R packages. In this lesson, we will very briefly introduce some extended R packages, and then touch upon writing R packages. 6.1 Extended R Packages package name remarks tidyverse a set of packages; for data manipulation/analysis/visualization data.table for data manipulation; enabling fast code lubridate for dealing with dates, times etc. shiny for creating shiny apps bookdown for writing books blogdown for creating web sites devtools for creating R packages NB: We can see all packages included in tidyverse tidy_pkgs &lt;- tidyverse::tidyverse_packages(include_self = FALSE) print(tidy_pkgs) ## [1] &quot;broom&quot; &quot;cli&quot; &quot;crayon&quot; &quot;dbplyr&quot; ## [5] &quot;dplyr&quot; &quot;dtplyr&quot; &quot;forcats&quot; &quot;ggplot2&quot; ## [9] &quot;googledrive&quot; &quot;googlesheets4&quot; &quot;haven&quot; &quot;hms&quot; ## [13] &quot;httr&quot; &quot;jsonlite&quot; &quot;lubridate&quot; &quot;magrittr&quot; ## [17] &quot;modelr&quot; &quot;pillar&quot; &quot;purrr&quot; &quot;readr&quot; ## [21] &quot;readxl&quot; &quot;reprex&quot; &quot;rlang&quot; &quot;rstudioapi&quot; ## [25] &quot;rvest&quot; &quot;stringr&quot; &quot;tibble&quot; &quot;tidyr&quot; ## [29] &quot;xml2&quot; We can Install all these packages in the tidyverse by running install.packages(\"tidyverse\") . Among these 29 packages, ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, and forcats are the so-called core packages, which will be loaded all together if we run library(tidyverse). See this: https://www.tidyverse.org/packages/ These articles may be of our interest: https://support.posit.co/hc/en-us/articles/201057987-Quick-list-of-useful-R-packages https://www.datacamp.com/tutorial/top-ten-most-important-packages-in-r-for-data-science https://www.r-bloggers.com/2021/04/15-essential-packages-in-r-for-data-science/ https://towardsdatascience.com/the-most-underrated-r-packages-254e4a6516a1 6.2 Writing R Packages The following steps are distilled from Chapter 2 of Hadley Wickham and Jenny Bryan (https://r-pkgs.org/). I am going to make an R package called BookStarter. Preparation: Create an empty repo at Github, e.g.Â git@github.com:zhanglynz/BookStarter.git Use create_package() (only once) to scaffold a new R package library(devtools) create_package(&quot;F:/Projects/BookStarter&quot;) Use use_r() to start an R function (in a new session) library(devtools) use_r(&quot;start_book&quot;) In the source editor and put the cursor at the start of the new function Now do Code &gt; Insert roxygen skeleton load_all() check() Edit DESCRIPTION Use use_mit_license() (only use once) Use document() to create help document for the function check() # again Testing use_testthat() # only use it once use_test(&quot;start_book&quot;) Use use_package(\"some_a_package\") to add dependence Gitlab/Github # Git the project; push to Gitlab # push an existing repository from the command line git init git commit -m &quot;first commit&quot; git branch -M main git remote add origin git@github.com:zhanglynz/BookStarter.git git push -u origin main use_readme_rmd() # only use it once check() # again install() "],["L7.html", "7 Lesson 7 Making Plots", " 7 Lesson 7 Making Plots "],["L8.html", "8 Lesson 8 Data Manipulation", " 8 Lesson 8 Data Manipulation "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
